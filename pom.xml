<?xml version="1.0" encoding="UTF-8"?>
<!--  
  Copyright 2020 Averbis GmbH

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<packaging>jar</packaging>
	<groupId>de.averbis.tutorials</groupId>
	<artifactId>hello-world-pear</artifactId>
	<version>3.0.0-SNAPSHOT</version>

	<name>${project.artifactId}</name>
	<description>
		This project provides a minimal example how to build an analysis engine and 
		how to bundle it as a self contained UIMA PEAR package.
	</description>
	<url>https://github.com/averbis/hello-world-pear</url>
	<inceptionYear>2020</inceptionYear>
	<organization>
		<name>Averbis GmbH</name>
		<url>https://averbis.com</url>
	</organization>
	<licenses>
		<license>
			<name>Apache License Version 2.0</name>
			<url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
			<distribution>repo</distribution>
		</license>
	</licenses>

	<properties>
		<!-- See https://github.com/averbis/core-typesystems for latest version of Averbis core type systems  -->
		<core-typesystems-version>4.1.0</core-typesystems-version>
		<!-- See https://github.com/averbis/health-typesystems for the latest version of Averbis health type systems -->
		<health-typesystems-version>3.1.0</health-typesystems-version>

		<uima-version>3.2.0</uima-version>
		<uimafit-version>3.2.0</uimafit-version>
		<log4j-version>2.8.2</log4j-version>
		<slf4j-version>1.7.30</slf4j-version>

		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>

	<dependencies>

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${slf4j-version}</version>
			<scope>provided</scope>
		</dependency>
		
		<!-- 
		  - The UIMA Framework is a dependency with the scope "provided" because the PEAR will 
		  - eventually be installed into an UIMA installation, so it must be there. It serves
		  - as the gateway by with different UIMA components/PEARs can communicate with each other,
		  - so a single instance of the framework must be shared between them.
		  -->
		<dependency>
			<groupId>org.apache.uima</groupId>
			<artifactId>uimaj-core</artifactId>
			<version>${uima-version}</version>
			<scope>provided</scope>
		</dependency>

		<!--
		  - uimaFIT is a convenience API building on top of UIMA. So it is not part of the shared
		  - framework and cannot be expected to be available. Hence, it is a regular dependency
		  - which implicitly has the scope "compile". 
		  -->
		<dependency>
			<groupId>org.apache.uima</groupId>
			<artifactId>uimafit-core</artifactId>
			<version>${uimafit-version}</version>
		</dependency>

		<dependency>
			<groupId>de.averbis.textanalysis</groupId>
			<artifactId>components-core-typesystem</artifactId>
			<version>${core-typesystems-version}</version>
		</dependency>
		<dependency>
			<groupId>de.averbis.textanalysis</groupId>
			<artifactId>measurement-typesystem</artifactId>
			<version>${core-typesystems-version}</version>
		</dependency>
		<dependency>
			<groupId>de.averbis.textanalysis</groupId>
			<artifactId>temporal-typesystem</artifactId>
			<version>${core-typesystems-version}</version>
		</dependency>
		<dependency>
			<groupId>de.averbis.textanalysis</groupId>
			<artifactId>numeric-value-typesystem</artifactId>
			<version>${core-typesystems-version}</version>
		</dependency>
		<dependency>
			<groupId>de.averbis.textanalysis</groupId>
			<artifactId>named-entity-typesystem</artifactId>
			<version>${core-typesystems-version}</version>
		</dependency>
		<dependency>
			<groupId>de.averbis.textanalysis</groupId>
			<artifactId>text-typesystem</artifactId>
			<version>${core-typesystems-version}</version>
		</dependency>
		<dependency>
			<groupId>de.averbis.textanalysis</groupId>
			<artifactId>neural-typesystem</artifactId>
			<version>${core-typesystems-version}</version>
		</dependency>
		<dependency>
			<groupId>de.averbis.textanalysis</groupId>
			<artifactId>evaluation-typesystem</artifactId>
			<version>${core-typesystems-version}</version>
		</dependency>

		<dependency>
			<groupId>de.averbis.textanalysis</groupId>
			<artifactId>clinical-section-typesystem</artifactId>
			<version>${health-typesystems-version}</version>
		</dependency>
		<dependency>
			<groupId>de.averbis.textanalysis</groupId>
			<artifactId>components-health-typesystem</artifactId>
			<version>${health-typesystems-version}</version>
		</dependency>
		<dependency>
			<groupId>de.averbis.textanalysis</groupId>
			<artifactId>diagnosis-typesystem</artifactId>
			<version>${health-typesystems-version}</version>
		</dependency>
		<dependency>
			<groupId>de.averbis.textanalysis</groupId>
			<artifactId>ehr-information-typesystem</artifactId>
			<version>${health-typesystems-version}</version>
		</dependency>
		<dependency>
			<groupId>de.averbis.textanalysis</groupId>
			<artifactId>laboratory-value-typesystem</artifactId>
			<version>${health-typesystems-version}</version>
		</dependency>
		<dependency>
			<groupId>de.averbis.textanalysis</groupId>
			<artifactId>medical-disambiguation-typesystem</artifactId>
			<version>${health-typesystems-version}</version>
		</dependency>
		<dependency>
			<groupId>de.averbis.textanalysis</groupId>
			<artifactId>medical-negation-typesystem</artifactId>
			<version>${health-typesystems-version}</version>
		</dependency>
		<dependency>
			<groupId>de.averbis.textanalysis</groupId>
			<artifactId>medication-typesystem</artifactId>
			<version>${health-typesystems-version}</version>
		</dependency>
		<dependency>
			<groupId>de.averbis.textanalysis</groupId>
			<artifactId>observation-typesystem</artifactId>
			<version>${health-typesystems-version}</version>
		</dependency>
		<dependency>
			<groupId>de.averbis.textanalysis</groupId>
			<artifactId>oncology-typesystem</artifactId>
			<version>${health-typesystems-version}</version>
		</dependency>
		<dependency>
			<groupId>de.averbis.textanalysis</groupId>
			<artifactId>pathology-typesystem</artifactId>
			<version>${health-typesystems-version}</version>
		</dependency>
		<dependency>
			<groupId>de.averbis.textanalysis</groupId>
			<artifactId>patient-information-typesystem</artifactId>
			<version>${health-typesystems-version}</version>
		</dependency>
		<dependency>
			<groupId>de.averbis.textanalysis</groupId>
			<artifactId>procedure-typesystem</artifactId>
			<version>${health-typesystems-version}</version>
		</dependency>
		<dependency>
			<groupId>de.averbis.textanalysis</groupId>
			<artifactId>therapy-typesystem</artifactId>
			<version>${health-typesystems-version}</version>
		</dependency>
		<dependency>
			<groupId>de.averbis.textanalysis</groupId>
			<artifactId>tnm-typesystem</artifactId>
			<version>${health-typesystems-version}</version>
		</dependency>

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.13.1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
			<version>${log4j-version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-slf4j-impl</artifactId>
			<version>${log4j-version}</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<artifactId>maven-failsafe-plugin</artifactId>
				<version>2.21.0</version>
				<executions>
					<execution>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- Generate Java classes for defined types -->
			<plugin>
				<groupId>org.apache.uima</groupId>
				<artifactId>jcasgen-maven-plugin</artifactId>
				<version>${uima-version}</version>
				<executions>
					<execution>
						<id>generate-jcas-classes</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<typeSystemIncludes>
								<typeSystemInclude>src/main/resources/de/averbis/tutorials/typesystem/HelloWorldTypesystem.xml</typeSystemInclude>
							</typeSystemIncludes>
							<typeSystemExcludes>
								<typeSystemExclude>/**/BasicTypeSystem.xml</typeSystemExclude>
								<typeSystemExclude>/**/InternalTypeSystem.xml</typeSystemExclude>
							</typeSystemExcludes>
							<limitToProject>true</limitToProject>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>3.0.0</version>
				<executions>
					<execution>
						<!--
						  - For convenience, we include the generated source for for the UIMA type Java classes
						  - from the jcasgen-maven-plugin in the sources JAR.
						  -->
						<id>add-source</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>add-source</goal>
						</goals>
						<configuration>
							<sources>
								<source>${project.build.directory}/generated-sources/java/</source>
							</sources>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.uima</groupId>
				<artifactId>uimafit-maven-plugin</artifactId>
				<version>${uimafit-version}</version>
				<executions>
					<execution>
						<!-- 
						  - Generate the UIMA component descriptor XML file which we refer to in the next step
						  - as the main component descriptor for the PEAR file. Because uimaFIT-based 
						  - auto-detection of type systems does not work with PEAR files, we embed the 
						  - type system directly in the UIMA component descriptor. We also run the "enhance"
						  - goal before the "generate" goal to pick up the JavaDoc of the component Java class
						  - and of the parameters inside and use them as component and parameter documentation
						  - in the generated UIMA component descriptor XML file.
						  -->
						<id>generate-component-descriptors</id>
						<phase>process-classes</phase>
						<goals>
							<goal>enhance</goal>
							<goal>generate</goal>
						</goals>
						<configuration>
							<outputDirectory>${basedir}/target/pearPackaging/desc</outputDirectory>
							<addTypeSystemDescriptions>EMBEDDED</addTypeSystemDescriptions>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<!-- 
						  - Gather together all the compile/runtime dependencies of the PEAR file and stage them
						  - into the default directory where the PearPackagingMavenPlugin will be looking for
						  - them.
						  -->
						<id>stage-dependencies</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<outputDirectory>${basedir}/target/pearPackaging/lib</outputDirectory>
							<overWriteSnapshots>true</overWriteSnapshots>
							<includeScope>runtime</includeScope>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.uima</groupId>
				<artifactId>PearPackagingMavenPlugin</artifactId>
				<version>${uima-version}</version>
				<executions>
					<execution>
						<!-- 
						  - As a final step, a PEAR file is packaged up including the UIMA component XML
						  - descriptor and the dependencies we have prepared in the previous steps.
						  -->
						<id>package-pear</id>
						<phase>package</phase>
						<goals>
							<goal>package</goal>
						</goals>
						<configuration>
							<mainComponentDesc>desc/de/averbis/tutorials/HelloWorldAnnotator.xml</mainComponentDesc>
							<componentId>${project.artifactId}-${project.version}</componentId>
							<datapath>$main_root/resources</datapath>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>