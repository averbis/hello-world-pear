<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>de.averbis.tutorials</groupId>
	<artifactId>hello-world-pear</artifactId>
	<version>2.0.0</version>

	<properties>
		<uima-version>3.1.1</uima-version>
		<uimafit-version>3.1.0</uimafit-version>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>

	<dependencies>
		<!-- 
		  - The UIMA Framework is a dependency with the scope "provided" because the PEAR will 
		  - eventually be installed into an UIMA installation, so it must be there. It serves
		  - as the gateway by with different UIMA components/PEARs can communicate with each other,
		  - so a single instance of the framework must be shared between them.
		  -->
		<dependency>
			<groupId>org.apache.uima</groupId>
			<artifactId>uimaj-core</artifactId>
			<version>${uima-version}</version>
			<scope>provided</scope>
		</dependency>

		<!--
		  - uimaFIT is a convenience API building on top of UIMA. So it is not part of the shared
		  - framework and cannot be expected to be available. Hence, it is a regular dependency
		  - which implicitly has the scope "compile". 
		  -->
		<dependency>
			<groupId>org.apache.uima</groupId>
			<artifactId>uimafit-core</artifactId>
			<version>${uimafit-version}</version>
		</dependency>

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.11</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.uima</groupId>
				<artifactId>jcasgen-maven-plugin</artifactId>
				<version>${uima-version}</version>
				<executions>
					<execution>
						<!--
						  - The jcasgen-maven-plugin generates Java classes representing the types defined in
						  - the "HelloWorldTypesystem.xml". These classes are optional, but they enable
						  - type-safe implementations of UIMA components.
						  -->
						<id>generate-jcas-classes</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
						<configuration>
							<typeSystemIncludes>
								<typeSystemInclude>src/main/resources/de/averbis/tutorials/typesystem/HelloWorldTypesystem.xml</typeSystemInclude>
							</typeSystemIncludes>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>3.0.0</version>
				<executions>
					<execution>
						<!--
						  - For convenience, we include the generated source for for the UIMA type Java classes
						  - from the jcasgen-maven-plugin in the sources JAR.
						  -->
						<id>add-source</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>add-source</goal>
						</goals>
						<configuration>
							<sources>
								<source>${project.build.directory}/generated-sources/java/</source>
							</sources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			
			<plugin>
				<groupId>org.apache.uima</groupId>
				<artifactId>uimafit-maven-plugin</artifactId>
				<version>${uimafit-version}</version>
				<executions>
					<execution>
						<!-- 
						  - Generate the UIMA component descriptor XML file which we refer to in the next step
						  - as the main component descriptor for the PEAR file. Because uimaFIT-based 
						  - auto-detection of type systems does not work with PEAR files, we embed the 
						  - type system directly in the UIMA component descriptor. We also run the "enhance"
						  - goal before the "generate" goal to pick up the JavaDoc of the component Java class
						  - and of the parameters inside and use them as component and parameter documentation
						  - in the generated UIMA component descriptor XML file.
						  -->
						<id>generate-component-descriptors</id>
						<phase>process-classes</phase>
						<goals>
							<goal>enhance</goal>
							<goal>generate</goal>
						</goals>
						<configuration>
							<outputDirectory>${basedir}/target/pearPackaging/desc</outputDirectory>
							<addTypeSystemDescriptions>EMBEDDED</addTypeSystemDescriptions>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>3.1.2</version>
				<executions>
					<execution>
						<!-- 
						  - Gather together all the compile/runtime dependencies of the PEAR file and stage them
						  - into the default directory where the PearPackagingMavenPlugin will be looking for
						  - them.
						  -->
						<id>stage-dependencies</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<outputDirectory>${basedir}/target/pearPackaging/lib</outputDirectory>
							<overWriteSnapshots>true</overWriteSnapshots>
							<includeScope>runtime</includeScope>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.uima</groupId>
				<artifactId>PearPackagingMavenPlugin</artifactId>
				<version>${uima-version}</version>
				<executions>
					<execution>
						<!-- 
						  - As a final step, a PEAR file is packaged up including the UIMA component XML
						  - descriptor and the dependencies we have prepared in the previous steps.
						  -->
						<id>package-pear</id>
						<phase>package</phase>
						<goals>
							<goal>package</goal>
						</goals>
						<configuration>
							<mainComponentDesc>desc/de/averbis/tutorials/HelloWorldAnnotator.xml</mainComponentDesc>
							<componentId>${project.artifactId}-${project.version}</componentId>
							<datapath>$main_root/resources</datapath>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>